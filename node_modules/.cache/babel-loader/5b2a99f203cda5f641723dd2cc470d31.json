{"ast":null,"code":"import _slicedToArray from \"/opt/lampp/htdocs/React/react-hooks-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/opt/lampp/htdocs/React/react-hooks-practice/src/App.js\";\nimport React, { useState } from \"react\";\nimport \"./styles.css\";\nexport default function App() {\n  var _this = this;\n\n  var _useState = useState([\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\", \"Task 5\"]),\n      _useState2 = _slicedToArray(_useState, 2),\n      pending = _useState2[0],\n      setPending = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inprogress = _useState4[0],\n      setInProgress = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      completed = _useState6[0],\n      setCompleted = _useState6[1];\n\n  var handlePending = function handlePending(index) {\n    var li = pending.splice(index, 1);\n    setPending(pending);\n    setInProgress(inprogress.concat(li));\n  };\n\n  var handleInProgress = function handleInProgress(index) {\n    var li = inprogress.splice(index, 1);\n    setInProgress(inprogress);\n    setCompleted(completed.concat(li));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, \"You have 5 tasks in Pending State, When onclick, the particular task should move to Inprogress State\"), \" \", /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"If its in Inprogress State, When onclick, the particular task should move to completed state.\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"Pending Task\"), \" \", /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, pending.map(function (val, index) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      onClick: function onClick() {\n        return handlePending(index);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, val);\n  })), \" \", /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, \"Inprogress Task\"), inprogress.length ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, inprogress.map(function (val, index) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      onClick: function onClick() {\n        return handleInProgress(index);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }\n    }, val);\n  })) : \"\", \" \", /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Completed Task\"), completed.length ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, completed.map(function (val, index) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 20\n      }\n    }, val);\n  })) : \"\", \" \");\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/React/react-hooks-practice/src/App.js"],"names":["React","useState","App","pending","setPending","inprogress","setInProgress","completed","setCompleted","handlePending","index","li","splice","concat","handleInProgress","map","val","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\nexport default function App() {\n  const [pending, setPending] = useState([\n    \"Task 1\",\n    \"Task 2\",\n    \"Task 3\",\n    \"Task 4\",\n    \"Task 5\"\n  ]);\n  const [inprogress, setInProgress] = useState([]);\n  const [completed, setCompleted] = useState([]);\n\n  const handlePending = (index) => {\n    let li = pending.splice(index, 1);\n    setPending(pending);\n    setInProgress(inprogress.concat(li));\n  };\n\n  const handleInProgress = (index) => {\n    let li = inprogress.splice(index, 1);\n    setInProgress(inprogress);\n    setCompleted(completed.concat(li));\n  };\n\n  return (\n    <div className=\"App\">\n      <p>\n        You have 5 tasks in Pending State, When onclick, the particular task\n        should move to Inprogress State\n      </p>{\" \"}\n      <p>\n        If its in Inprogress State, When onclick, the particular task should\n        move to completed state.\n      </p>\n      <h2>Pending Task</h2>{\" \"}\n      <p>\n        {pending.map((val, index) => {\n          return (\n            <li key={index} onClick={() => handlePending(index)}>\n              {val}\n            </li>\n          );\n        })}\n      </p>{\" \"}\n      <h2>Inprogress Task</h2>\n      {inprogress.length ? (\n        <p>\n          {inprogress.map((val, index) => {\n            return (\n              <li key={index} onClick={() => handleInProgress(index)}>\n                {val}\n              </li>\n            );\n          })}\n        </p>\n      ) : (\n        \"\"\n      )}{\" \"}\n      <h2>Completed Task</h2>\n      {completed.length ? (\n        <p>\n          {completed.map((val, index) => {\n            return <li key={index}>{val}</li>;\n          })}\n        </p>\n      ) : (\n        \"\"\n      )}{\" \"}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}